import asyncio
import logging
import os
import psycopg as ps
from aiogram import Bot, Dispatcher
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from psycopg import AsyncConnection
from handlers import profile_router, reg_router
from shared.database import Database

# –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –¥–ª—è –ª–æ–≥–æ–≤
log_path = os.path.join(os.path.dirname(__file__), "logs/couriers_bot_logs.log")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    filename=log_path,
    filemode="a",
    format="%(asctime)s %(levelname)s %(message)s",
    encoding="UTF-8"
)

# –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ –±–æ—Ç–∞
bot = Bot(
    token=os.getenv("BOT_TOKEN"),
    default=DefaultBotProperties(
        parse_mode=ParseMode.HTML
    )
)

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
logging.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")

# –î–∏—Å–ø–µ—Ç—á–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –º–∞—Ä—à—Ä—É—Ç–æ–≤
dp = Dispatcher()
dp.include_router(reg_router)
dp.include_router(profile_router)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —á–µ—Ä–µ–∑ LISTEN
async def listen_notifications():
    async_connect = await Database.get_async_connection()
    if not async_connect:
        logging.error("–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ!")
        return

    await async_connect.execute("LISTEN create_order;")
    logging.info("üîî Listening on 'create_order' channel...")

    async for notify in async_connect.notifies():
        logging.info(f"üì® Received: {notify.channel} - {notify.payload}")
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –±–æ—Ç–∞ (start_polling)
async def start_polling():
    logging.info("–ó–∞–ø—É—â–µ–Ω –±–æ—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π...")
    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot)

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≤—Å–µ—Ö –∑–∞–¥–∞—á
async def main():
    # –ó–∞–ø—É—Å–∫ –¥–≤—É—Ö –∑–∞–¥–∞—á –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
    await asyncio.gather(start_polling(), listen_notifications())

if __name__ == "__main__":
    asyncio.set_event_loop_policy(asyncio.WindowsSelectorEventLoopPolicy())
    # –ó–∞–ø—É—Å–∫ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    asyncio.run(main())
